// Code generated by 'go generate'; DO NOT EDIT.

package windows_systemcalls

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return nil
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modnetapi32 = windows.NewLazySystemDLL("netapi32.dll")
	modmpr      = windows.NewLazySystemDLL("mpr.dll")

	procNetShareEnum           = modnetapi32.NewProc("NetShareEnum")
	procNetShareGetInfo        = modnetapi32.NewProc("NetShareGetInfo")
	procWNetAddConnection2W    = modmpr.NewProc("WNetAddConnection2W")
	procWNetCancelConnection2W = modmpr.NewProc("WNetCancelConnection2W")
	procNetDfsGetInfo          = modnetapi32.NewProc("NetDfsGetInfo")
)

func NetShareEnum(serverName *uint16, level uint32, buf **byte, prefMaxLen uint32, entriesRead *uint32, totalEntries *uint32, resumeHandle *uint32) (neterr error) {
	r0, _, _ := syscall.Syscall9(procNetShareEnum.Addr(), 7, uintptr(unsafe.Pointer(serverName)), uintptr(level), uintptr(unsafe.Pointer(buf)), uintptr(prefMaxLen), uintptr(unsafe.Pointer(entriesRead)), uintptr(unsafe.Pointer(totalEntries)), uintptr(unsafe.Pointer(resumeHandle)), 0, 0)
	if r0 != 0 {
		neterr = syscall.Errno(r0)
	}
	return
}

func NetShareGetInfo(serverName *uint16, netName *uint16, level uint32, buf **byte) (neterr error) {
	r0, _, _ := syscall.Syscall6(procNetShareGetInfo.Addr(), 4, uintptr(unsafe.Pointer(serverName)), uintptr(unsafe.Pointer(netName)), uintptr(level), uintptr(unsafe.Pointer(buf)), 0, 0)
	if r0 != 0 {
		neterr = syscall.Errno(r0)
	}
	return
}

func WNetAddConnection2(netResource *Netresource, password *uint16, username *uint16, flags uint32) (neterr error) {
	r0, _, _ := syscall.Syscall6(procWNetAddConnection2W.Addr(), 4, uintptr(unsafe.Pointer(netResource)), uintptr(unsafe.Pointer(password)), uintptr(unsafe.Pointer(username)), uintptr(flags), 0, 0)
	if r0 != 0 {
		neterr = syscall.Errno(r0)
	}
	return
}

func WNetCancelConnection2(name *uint16, flags uint32, force bool) (neterr error) {
	var _p0 uint32
	if force {
		_p0 = 1
	} else {
		_p0 = 0
	}
	r0, _, _ := syscall.Syscall(procWNetCancelConnection2W.Addr(), 3, uintptr(unsafe.Pointer(name)), uintptr(flags), uintptr(_p0))
	if r0 != 0 {
		neterr = syscall.Errno(r0)
	}
	return
}

func NetDfsGetInfo(DfsEntryPath *uint16, ServerName *uint16, ShareName *uint16, Level uint32, Buffer **byte) (neterr error) {
	r0, _, _ := syscall.Syscall6(procNetDfsGetInfo.Addr(), 5, uintptr(unsafe.Pointer(DfsEntryPath)), uintptr(unsafe.Pointer(ServerName)), uintptr(unsafe.Pointer(ShareName)), uintptr(Level), uintptr(unsafe.Pointer(Buffer)), 0)
	if r0 != 0 {
		neterr = syscall.Errno(r0)
	}
	return
}
