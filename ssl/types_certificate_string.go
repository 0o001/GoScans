// Code generated by "stringer -linecomment -output=types_certificate_string.go -type=PublicKey,SignatureAlgorithm,SignatureHash ./"; DO NOT EDIT.

package ssl

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PUB_K_Unknown-0]
	_ = x[PUB_K_RSA-1]
	_ = x[PUB_K_DSA-2]
	_ = x[PUB_K_ECDSA-3]
	_ = x[PUB_K_ED25519-4]
	_ = x[PUB_K_ED448-5]
	_ = x[PUB_K_GOSTR341001-6]
	_ = x[PUB_K_GOSTR341094-7]
}

const _PublicKey_name = "RSADSAECDSAEd25519Ed448GOSTR341001GOSTR341094"

var _PublicKey_index = [...]uint8{0, 0, 3, 6, 11, 18, 23, 34, 45}

func (i PublicKey) String() string {
	if i >= PublicKey(len(_PublicKey_index)-1) {
		return "PublicKey(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _PublicKey_name[_PublicKey_index[i]:_PublicKey_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SIG_A_Unknown-0]
	_ = x[SIG_A_RSA-1]
	_ = x[SIG_A_DSA-2]
	_ = x[SIG_A_ECDSA-3]
	_ = x[SIG_A_RSAPSS-4]
}

const _SignatureAlgorithm_name = "RSADSAECDSARSAPSS"

var _SignatureAlgorithm_index = [...]uint8{0, 0, 3, 6, 11, 17}

func (i SignatureAlgorithm) String() string {
	if i >= SignatureAlgorithm(len(_SignatureAlgorithm_index)-1) {
		return "SignatureAlgorithm(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SignatureAlgorithm_name[_SignatureAlgorithm_index[i]:_SignatureAlgorithm_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SIG_H_Unknown-0]
	_ = x[SIG_H_None-1]
	_ = x[SIG_H_MD2-2]
	_ = x[SIG_H_MD5-3]
	_ = x[SIG_H_SHA1-4]
	_ = x[SIG_H_SHA224-5]
	_ = x[SIG_H_SHA256-6]
	_ = x[SIG_H_SHA384-7]
	_ = x[SIG_H_SHA512-8]
	_ = x[SIG_H_RIPEMD160-9]
	_ = x[SIG_H_GOSTR3411-10]
	_ = x[SIG_H_BLAKE2B-11]
	_ = x[SIG_H_BLAKE2S-12]
}

const _SignatureHash_name = "NoneMD2MD5SHA1SHA224SHA256SHA384SHA512RMDGOSTR3411BLAKE2bBLAKE2s"

var _SignatureHash_index = [...]uint8{0, 0, 4, 7, 10, 14, 20, 26, 32, 38, 41, 50, 57, 64}

func (i SignatureHash) String() string {
	if i >= SignatureHash(len(_SignatureHash_index)-1) {
		return "SignatureHash(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SignatureHash_name[_SignatureHash_index[i]:_SignatureHash_index[i+1]]
}
